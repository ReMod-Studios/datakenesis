/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.remodstudios.datakenesis.plugin

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.artifacts.dsl.DependencyHandler
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.JavaExec

class DatakenesisPlugin: Plugin<Project> {
    // TODO make this configurable
    val kotlinVersion = "1.5.10"

    private fun kotlinModule(name: String) = "org.jetbrains.kotlin:kotlin-$name:$kotlinVersion"

    override fun apply(project: Project) {
        with(project) {
            val javaPlugin = convention.getPlugin<JavaPluginConvention>()
            val sourceSets = javaPlugin.sourceSets
            val mainSrcSet = sourceSets.getByName("main")

            val kotlinc = configurations.register("kotlinc")
            val scriptsImplementation = configurations.register("scriptsImplementation") {
                it.extendsFrom(configurations.getByName("implementation"))
            }
            with(configurations) {
                getByName("compileClasspath").extendsFrom(scriptsImplementation.get())
                getByName("runtimeClasspath").extendsFrom(scriptsImplementation.get())
            }

            val scriptsDir = "src/scripts/kotlin"
            sourceSets.register("scripts") {
                it.java.srcDir(scriptsDir)
            }


            repositories {
                mavenCentral()
                jcenter() // press F to pay respects for JCenter
            }

            dependencies.addScriptDependencies()
            with(dependencies) {
                add("kotlinc", kotlinModule("stdlib"))
                add("kotlinc", kotlinModule("reflect"))
                add("kotlinc", kotlinModule("compiler-embeddable"))
                add("kotlinc", kotlinModule("script-runtime"))
                add("kotlinc", kotlinModule("scripting-compiler-embeddable"))

                add("scriptsImplementation", kotlinModule("stdlib"))
                add("scriptsImplementation", mainSrcSet.output)
            }

            tasks {
                val kotlinHome = project.file("$buildDir/kotlin")

                val prepareKotlinHome = register<Copy>("prepareKotlinHome") { task ->
                    task.from(kotlinc)
                    task.into("$kotlinHome/lib")
                    task.rename {
                        // strip the version suffix to satisfy the compiler
                        it.replace("-${kotlinVersion}", "")
                    }
                }
                register<JavaExec>("datakenesis") { task ->
                    task.dependsOn(prepareKotlinHome)
                    task.main = "org.jetbrains.kotlin.cli.jvm.K2JVMCompiler"
                    task.classpath = kotlinc.get()

                    println("hello = ${configurations.getByName("runtimeClasspath").asPath}")

                    task.args(
                        "-kotlin-home", kotlinHome,
                        "-classpath", configurations.getByName("runtimeClasspath").asPath,
                        "-script", "$rootDir/$scriptsDir/datakenesis.kts"
                    )
                }
            }


        }
    }

    private fun DependencyHandler.addScriptDependencies() {
    }
}
